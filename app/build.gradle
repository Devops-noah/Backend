/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */
import java.util.Properties;


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
    id "org.sonarqube" version "5.1.0.4882" // For code quality

    // Add Spring Boot plugin to support Spring Boot application tasks
    id 'org.springframework.boot' version '3.3.3'

    // Add dependency management for consistent versions of Spring dependencies
    id 'io.spring.dependency-management' version '1.1.0'

}

// Load the .env file
def dotenv = new Properties()
file('.env').withInputStream { dotenv.load(it) }

ext {
    googleClientId = dotenv.getProperty('GOOGLE_CLIENT_ID')
    googleClientSecret = dotenv.getProperty('GOOGLE_CLIENT_SECRET')
}

bootRun {
    systemProperty 'GOOGLE_CLIENT_ID', googleClientId
    systemProperty 'GOOGLE_CLIENT_SECRET', googleClientSecret
}


jacoco {
    toolVersion = "0.8.12" // Use the latest version
}

sonar {
    properties {
        property "sonar.projectKey", "Devops-noah_Backend"
        property "sonar.organization", "devops-noah"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Generates JaCoCo report after testing
}

jacocoTestReport {
    reports {
        xml.required.set(true) // Necessary for badge services to read reports
        html.required.set(true)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()  // Ensure Google's Maven repository is included
}

dependencies {
    // These dependencies is used by the application.
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Spring boot dependency
    implementation 'org.springframework.boot:spring-boot-starter-web:3.3.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // JWT dependencies
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // For JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // Google API Client (Exclude android-json)
    implementation ('com.google.api-client:google-api-client:1.34.0') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }

    // Google OAuth Client
    implementation 'com.google.oauth-client:google-oauth-client:1.34.1'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1' // Fix TokenResponse issue

    // Google HTTP Client with GSON
    implementation 'com.google.http-client:google-http-client-gson:1.42.3'

    // Google HTTP Client with Jackson (Fix for JacksonFactory issue)
    implementation 'com.google.http-client:google-http-client-jackson2:1.42.3'

    // Google Auth Library (Fix TokenResponse to Credential issue)
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.22.0'

    // Google Calendar API
    implementation group: 'com.google.apis', name: 'google-api-services-calendar', version: 'v3-rev411-1.25.0'

    // Jackson for JSON Parsing
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // PostgreSQL dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.3'
    implementation 'org.postgresql:postgresql:42.7.4'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.json:json:20210307'  // Use the latest version

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.security:spring-security-messaging'
    //firebase
    implementation 'com.google.firebase:firebase-admin:9.2.0'
    implementation 'com.google.firebase:firebase-database:20.3.0'



    // Testing dependency
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.3'
    testImplementation 'org.springframework.security:spring-security-test:6.1.0'

}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("--enable-preview")
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

group = 'fr.parisnanterre.noah'
version = '0.0.1'


application {
    // Define the main class for the application.
    mainClass = 'fr.parisnanterre.noah.TravelCarryApplication'
}