plugins {
    id 'application'
    id 'jacoco'
    id "org.sonarqube" version "5.1.0.4882"
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.0'
    // Pour la génération de documentation si besoin
    // id 'org.asciidoctor.jvm.convert' version '4.0.2'
    // id 'org.asciidoctor.jvm.pdf' version '4.0.2'
}

// Chargement des variables .env (optionnel)
/*
import java.util.Properties
def dotenv = new Properties()
file('.env').withInputStream { dotenv.load(it) }

ext {
    googleClientId = dotenv.getProperty('GOOGLE_CLIENT_ID')
    googleClientSecret = dotenv.getProperty('GOOGLE_CLIENT_SECRET')
}

bootRun {
    systemProperty 'GOOGLE_CLIENT_ID', googleClientId
    systemProperty 'GOOGLE_CLIENT_SECRET', googleClientSecret
}
*/

jacoco {
    toolVersion = "0.8.12"
}

sonar {
    properties {
        property "sonar.projectKey", "Devops-noah_Backend"
        property "sonar.organization", "devops-noah"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

repositories {
    mavenCentral()
    google() // nécessaire pour certaines lib Google
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.3.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.3'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.security:spring-security-messaging'

    // PostgreSQL
    implementation 'org.postgresql:postgresql:42.7.4'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Google API & OAuth2 & Calendar
    implementation ('com.google.api-client:google-api-client:1.34.0') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    implementation 'com.google.oauth-client:google-oauth-client:1.34.1'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.http-client:google-http-client-gson:1.42.3'
    implementation 'com.google.http-client:google-http-client-jackson2:1.42.3'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.22.0'
    implementation 'com.google.apis:google-api-services-calendar:v3-rev411-1.25.0'

    // Firebase
    implementation 'com.google.firebase:firebase-admin:9.2.0'
    // firebase-database retiré : uniquement Android

    // OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.json:json:20210307'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.3'
    testImplementation 'org.springframework.security:spring-security-test:6.1.0'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("--enable-preview")
}

testing {
    suites {
        test {
            useJUnit('4.13.2')
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

group = 'fr.parisnanterre.noah'
version = '0.0.1'

application {
    mainClass = 'fr.parisnanterre.noah.TravelCarryApplication'
}

// Pour activer la génération de doc si les plugins asciidoctor sont décommentés
/*
asciidoctor {
    sourceDir = file('src/docs/asciidoctor')
    outputDir = file("${buildDir}/docs/asciidoctor")
}
asciidoctorj {
    requires 'rouge'
    modules {
        diagram.use()
        diagram.version '1.5.16'
    }
    attributes 'build-gradle': file('build.gradle'),
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'source-highlighter': 'rouge',
            'rouge-style': 'github',
            'rouge-theme': 'github'
}
tasks.named('asciidoctor').configure {
    dependsOn tasks.named('asciidoctorPdf')
}
tasks.named('build').configure {
    dependsOn tasks.named('asciidoctor')
}
*/
